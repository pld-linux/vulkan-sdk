diff -dur -x '*.orig' -x '*.rej' -x '*~' VulkanTools-sdk-1.0.32.0.orig/api_dump_generator.py VulkanTools-sdk-1.0.32.0/api_dump_generator.py
--- VulkanTools-sdk-1.0.32.0.orig/api_dump_generator.py	2016-11-10 18:52:27.000000000 +0100
+++ VulkanTools-sdk-1.0.32.0/api_dump_generator.py	2016-11-23 14:38:41.000000000 +0100
@@ -676,7 +676,7 @@
 }}
 """
 
-POINTER_TYPES = ['void', 'xcb_connection_t', 'Display', 'SECURITY_ATTRIBUTES', 'ANativeWindow']
+POINTER_TYPES = ['void', 'xcb_connection_t', 'Display', 'SECURITY_ATTRIBUTES', 'ANativeWindow', 'wl_surface', 'wl_display']
 VALIDITY_CHECKS = {
     'VkBufferCreateInfo': {
         'pQueueFamilyIndices': 'object.sharingMode == VK_SHARING_MODE_CONCURRENT',
@@ -1433,4 +1433,4 @@
         return {
             'unName': self.name,
         }
-            
\ No newline at end of file
+            
diff -dur -x '*.orig' -x '*.rej' -x '*~' VulkanTools-sdk-1.0.32.0.orig/vk_helper_api_dump.py VulkanTools-sdk-1.0.32.0/vk_helper_api_dump.py
--- VulkanTools-sdk-1.0.32.0.orig/vk_helper_api_dump.py	2016-11-10 18:52:27.000000000 +0100
+++ VulkanTools-sdk-1.0.32.0/vk_helper_api_dump.py	2016-11-23 14:45:42.000000000 +0100
@@ -1468,7 +1468,7 @@
                     elif is_type(self.struct_dict[s][m]['type'], 'struct'):
                         sh_funcs.append('%sstructSize += %s(pStruct->%s);' % (indent, self._get_size_helper_func_name(self.struct_dict[s][m]['type']), self.struct_dict[s][m]['name']))
                     elif 'void' not in self.struct_dict[s][m]['type'].lower():
-                        if (self.struct_dict[s][m]['type'] != 'xcb_connection_t'):
+                        if (self.struct_dict[s][m]['type'] not in ('xcb_connection_t', 'struct wl_display', 'struct wl_surface')):
                             sh_funcs.append('%sstructSize += sizeof(%s);' % (indent, self.struct_dict[s][m]['type']))
                 elif 'size_t' == self.struct_dict[s][m]['type'].lower():
                     sh_funcs.append('%sstructSize += pStruct->%s;' % (indent, self.struct_dict[s][m]['name']))
diff -dur -x '*.orig' -x '*.rej' -x '*~' VulkanTools-sdk-1.0.32.0.orig/vk_helper.py VulkanTools-sdk-1.0.32.0/vk_helper.py
--- VulkanTools-sdk-1.0.32.0.orig/vk_helper.py	2016-11-10 18:52:27.000000000 +0100
+++ VulkanTools-sdk-1.0.32.0/vk_helper.py	2016-11-23 14:45:42.000000000 +0100
@@ -1424,7 +1424,7 @@
                     elif is_type(self.struct_dict[s][m]['type'], 'struct'):
                         sh_funcs.append('%sstructSize += %s(pStruct->%s);' % (indent, self._get_size_helper_func_name(self.struct_dict[s][m]['type']), self.struct_dict[s][m]['name']))
                     elif 'void' not in self.struct_dict[s][m]['type'].lower():
-                        if (self.struct_dict[s][m]['type'] != 'xcb_connection_t'):
+                        if (self.struct_dict[s][m]['type'] not in ('xcb_connection_t', 'struct wl_display', 'struct wl_surface')):
                             sh_funcs.append('%sstructSize += sizeof(%s);' % (indent, self.struct_dict[s][m]['type']))
                 elif 'size_t' == self.struct_dict[s][m]['type'].lower():
                     sh_funcs.append('%sstructSize += pStruct->%s;' % (indent, self.struct_dict[s][m]['name']))
diff -dur -x '*.orig' -x '*.rej' -x '*~' VulkanTools-sdk-1.0.32.0.orig/vktrace/src/vktrace_layer/vktrace_lib_trace.cpp VulkanTools-sdk-1.0.32.0/vktrace/src/vktrace_layer/vktrace_lib_trace.cpp
--- VulkanTools-sdk-1.0.32.0.orig/vktrace/src/vktrace_layer/vktrace_lib_trace.cpp	2016-11-10 18:52:27.000000000 +0100
+++ VulkanTools-sdk-1.0.32.0/vktrace/src/vktrace_layer/vktrace_lib_trace.cpp	2016-11-23 14:45:42.000000000 +0100
@@ -1885,6 +1885,36 @@
 #endif
 
 //TODO Wayland and Mir support
+#ifdef VK_USE_PLATFORM_WAYLAND_KHR
+VKTRACER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL __HOOKED_vkCreateWaylandSurfaceKHR(
+    VkInstance                                  instance,
+    const VkWaylandSurfaceCreateInfoKHR*        pCreateInfo,
+    const VkAllocationCallbacks*                pAllocator,
+    VkSurfaceKHR*                               pSurface)
+{
+    VkResult result;
+
+    // TODO: Implement.
+
+    result = mid(instance)->instTable.CreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
+
+    return result;
+}
+
+VKTRACER_EXPORT VKAPI_ATTR VkBool32 VKAPI_CALL __HOOKED_vkGetPhysicalDeviceWaylandPresentationSupportKHR(
+    VkPhysicalDevice                            physicalDevice,
+    uint32_t                                    queueFamilyIndex,
+    struct wl_display*                          display)
+{
+    VkBool32 result;
+
+    // TODO: Implement.
+
+    result = mid(physicalDevice)->instTable.GetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
+
+    return result;
+}
+#endif
 
 /* TODO: Probably want to make this manual to get the result of the boolean and then check it on replay
 VKTRACER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL __HOOKED_vkGetPhysicalDeviceSurfaceSupportKHR(
